import threading
import time
import datetime
import logging

import gevent
from gevent import monkey

from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy import Column, SmallInteger, Integer, String, Text, BigInteger, DateTime
from sqlalchemy.ext.declarative import declarative_base

logger = logging.getLogger()
logger.setLevel(logging.INFO)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
logger.addHandler(console)

Base = declarative_base()


class TaskInfo(Base):
    IS_NOT_DEL = 0
    IS_DEL = 1

    __tablename__ = "wk_settings"
    id = Column(Integer, primary_key=True)
    rule = Column(Integer)
    content = Column(Text)
    status = Column(String(64), default="running")
    create_time = Column(DateTime, default=datetime.datetime.now)
    update_time = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now)
    is_del = Column(SmallInteger, default=0, comment="0-未删除 1-已删除")


class CommandInfo(Base):
    IS_NOT_SEND = 0
    IS_SEND = 1

    __tablename__ = "wk_commands"
    id = Column(Integer, primary_key=True)
    sid = Column(String)
    desc = Column(String)
    args = Column(Text)
    status = Column(String(64), default="running")
    create_time = Column(DateTime, default=datetime.datetime.now)
    update_time = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now)
    is_send = Column(String, default=0, comment="是否已发送过（0-否 1-是）")


class StatsInfo(Base):
    __tablename__ = "wk_statistics"
    id = Column(Integer, primary_key=True, autoincrement=True)
    code = Column(String)
    name = Column(String)
    value = Column(String)
    time = Column(DateTime, default=datetime.datetime.now)
    task_id = Column(Integer)


class ErrorLogInfo(Base):
    __tablename__ = "wk_error_log"
    id = Column(Integer, primary_key=True, autoincrement=True)
    code = Column(String)
    type = Column(String)
    level = Column(String, default="ERROR")
    time = Column(DateTime, default=datetime.datetime.now)
    detail = Column(String)
    data_type = Column(Integer, default=1, comment="1-异常 2-错误")


class SendDataInfo(Base):
    INIT_STATUS = 0
    FILE_FAILED = 1
    TEXT_FAILED = 2

    __tablename__ = "wk_send_data"
    id = Column(Integer, primary_key=True, autoincrement=True)
    data_id = Column(BigInteger)
    file_id = Column(BigInteger)
    data = Column(Text)
    url = Column(String)
    status = Column(SmallInteger, comment="0-初始状态 1-file失败 2-文本失败")
    time = Column(DateTime, default=datetime.datetime.now)
    task_id = Column(Integer)


SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:hily1234@127.0.0.1:3306/wk'
engine = create_engine(SQLALCHEMY_DATABASE_URI, echo=False, pool_size=30, pool_pre_ping=True, pool_recycle=60 * 30)
session_factory = sessionmaker(bind=engine)
DbSession = scoped_session(session_factory)


def check_db_connect(func):
    """ 装饰器：检查数据库连接是否超时 """

    def inner(self, *args, **kwargs):
        try:
            self.session.commit()
        except Exception as e:
            import traceback
            error = traceback.format_exc()
            logger.error(error)
            global engine, DbSession
            engine = create_engine(SQLALCHEMY_DATABASE_URI, echo=False, pool_size=30, pool_pre_ping=True,
                                   pool_recycle=60 * 30)
            session_factory = sessionmaker(bind=engine)
            DbSession = scoped_session(session_factory)
            self.session = DbSession()
            time.sleep(0.2)
        return func(self, *args, **kwargs)

    return inner


class DBHelper:

    def __init__(self, session=None):
        if not session:
            self.session = DbSession()
        else:
            self.session = session

    @check_db_connect
    def save(self, model):
        try:
            self.session.add(model)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()

    @check_db_connect
    def update(self, model):
        try:
            self.session.merge(model)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()

    @check_db_connect
    def delete(self, model):
        try:
            self.session.delete(model)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()

    @check_db_connect
    def save_all(self, model_list):
        try:
            self.session.add_all(model_list)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()

    @check_db_connect
    def delete_all(self, model_list):
        try:
            for model in model_list:
                self.session.delete(model)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()

    @check_db_connect
    def execute_sql(self, sql):
        try:
            self.session.execute(sql)
            self.session.commit()
        except Exception as e:
            logger.error(e)
            self.session.rollback()


class TaskHelper(DBHelper):

    @check_db_connect
    def get_task_by_id(self, task_id):
        return self.session.query(TaskInfo).filter(TaskInfo.id == task_id).first()

    @check_db_connect
    def get_all_tasks(self):
        return self.session.query(TaskInfo).all()

    @check_db_connect
    def get_need_run_tasks(self):
        return self.session.query(TaskInfo).filter(TaskInfo.is_del == 0).all()

    @check_db_connect
    def get_rule_count(self):
        return self.session.query(TaskInfo).filter(TaskInfo.is_del == 0).group_by(TaskInfo.rule).count()

    @check_db_connect
    def update_task_status(self, task_id, task_status="running"):
        # task_status:init,running,finish,error
        sql = "update wk_settings set status='%s' where id =%i " % (task_status, task_id)
        self.execute_sql(sql)

    @check_db_connect
    def delete_task(self, task_id):
        delete_sql = "update wk_settings set is_del = 1 where id = %s" % task_id
        self.execute_sql(delete_sql)

    @check_db_connect
    def clear_task(self):
        clear_sql = "update wk_settings set is_del = 1"
        self.execute_sql(clear_sql)


class CommandHelper(DBHelper):

    @check_db_connect
    def get_commands(self):
        return self.session.query(CommandInfo).filter(CommandInfo.is_send == CommandInfo.IS_NOT_SEND).all()

    @check_db_connect
    def set_command_is_send(self, command_id):
        # 将command置为已经发送过
        sql = "update wk_commands set is_send=1 where id =%i " % command_id
        self.execute_sql(sql)

    @check_db_connect
    def update_command_status(self, command_id, command_status="running"):
        # recived 已接收未执行，running 正在执行，finished 结束，error 执行出错
        sql = "update wk_commands set status='%s' where id =%i " % (command_status, command_id)
        self.execute_sql(sql)


class StatsHelper(DBHelper):

    @check_db_connect
    def get_stats(self):
        return self.session.query(StatsInfo.code, StatsInfo.name, func.sum(StatsInfo.value)).group_by(
            StatsInfo.code).all()

    @check_db_connect
    def get_last_stats1001(self):
        return self.session.query(StatsInfo).filter(StatsInfo.code == "stats1001").order_by(-StatsInfo.time).first()

    @check_db_connect
    def get_one_hour_stats_count(self, task_id):
        one_hour_ago = datetime.datetime.now() - datetime.timedelta(hours=1)
        return self.session.query(StatsInfo).filter(StatsInfo.task_id == task_id,
                                                    StatsInfo.time >= one_hour_ago).count()

    @check_db_connect
    def save_success(self, success_count):
        if success_count > 0:
            stats_info = StatsInfo()
            stats_info.code = "stats1002"
            stats_info.name = "累计成功发送数据量"
            stats_info.value = success_count
            self.save(stats_info)


class ErrorLogHelper(DBHelper):

    @check_db_connect
    def get_time_ago_error_logs(self, frequency):
        time_ago = datetime.datetime.now() - datetime.timedelta(seconds=frequency)
        return self.session.query(ErrorLogInfo).filter(ErrorLogInfo.time >= time_ago).all()

    @check_db_connect
    def get_error_logs(self):
        return self.session.query(ErrorLogInfo).all()

    @check_db_connect
    def save_api_error_log(self, detail, code="errorLog1004", type="platform_api", level="ERROR"):
        error_log_info = ErrorLogInfo()
        error_log_info.code = code
        error_log_info.type = type
        error_log_info.level = level
        error_log_info.detail = str(detail)
        self.save(error_log_info)


class SendDataHelper(DBHelper):

    @check_db_connect
    def get_send_datas(self):
        return self.session.query(SendDataInfo).all()

    @check_db_connect
    def get_file_fail_data(self, data_id):
        return self.session.query(SendDataInfo).filter(SendDataInfo.status == SendDataInfo.FILE_FAILED,
                                                       SendDataInfo.data_id == data_id).all()

    @check_db_connect
    def get_data_by_data_id(self, data_id):
        return self.session.query(SendDataInfo).filter(SendDataInfo.data_id == data_id).order_by(-SendDataInfo.id).all()

    @check_db_connect
    def get_fail_data_ids(self):
        data_ids = []
        ids = self.session.query(SendDataInfo.data_id).group_by(SendDataInfo.data_id).all()
        for data_id in ids:
            data_ids.append(data_id[0])
        return data_ids

    @check_db_connect
    def delete_by_data_id(self, data_id):
        sql = "delete from wk_send_data where data_id =%i " % data_id
        self.execute_sql(sql)

    @check_db_connect
    def get_file_id_list(self, data_id):
        file_ids = []
        ids = self.session.query(SendDataInfo.file_id).filter(SendDataInfo.data_id == data_id).all()
        for file_id in ids:
            if file_id[0] is not None:
                file_ids.append(file_id[0])
        return file_ids

    @check_db_connect
    def get_text_fail_data(self):
        return self.session.query(SendDataInfo).filter(SendDataInfo.status == SendDataInfo.TEXT_FAILED).all()


def send_status(send_data_helper=SendDataHelper(), **kwargs):
    datas = send_data_helper.get_send_datas()
    print(datas)


def get_task(task_helper=TaskHelper(), **kwargs):
    tasks = task_helper.get_all_tasks()
    print(tasks)


def run_with_gevent(api_method):
    # 多线程下每个线程都起一个新的会话；  多协程不能使用  会报AttributeError: 'NoneType' object has no attribute 'twophase'
    session = DbSession()
    task_helper = TaskHelper(session)
    send_data_helper = SendDataHelper(session)
    while True:
        try:
            api_method(send_data_helper=send_data_helper, task_helper=task_helper)
        except Exception as e:
            # 挂掉重试并记录原因
            import traceback
            ex_str = traceback.format_exc()
            logger.error(ex_str)
            api_method(send_data_helper=send_data_helper, task_helper=task_helper)
        time.sleep(60)


def main():
    monkey.patch_all()
    gevent.joinall([gevent.spawn(run_with_gevent, api_method=send_status),
                    gevent.spawn(run_with_gevent, api_method=get_task),
                    ])


def thread_main():
    method_list = [send_status, get_task]
    name_list = ["send_status", "get_task"]
    thread_list = []
    for i in range(len(method_list)):
        method = method_list[i]
        t = threading.Thread(target=run_with_gevent, name=name_list[i], args=(method, ))
        thread_list.append(t)
    for t in thread_list:
        t.start()


if __name__ == '__main__':
    # tasks = TaskHelper().get_all_tasks()
    # print(tasks)
    # main()
    thread_main()
